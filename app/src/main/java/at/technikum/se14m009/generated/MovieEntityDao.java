package at.technikum.se14m009.generated;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import at.technikum.se14m009.generated.MovieEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MovieEntity".
*/
public class MovieEntityDao extends AbstractDao<MovieEntity, Void> {

    public static final String TABLENAME = "MovieEntity";

    /**
     * Properties of entity MovieEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Title = new Property(0, String.class, "Title", false, "TITLE");
        public final static Property Runtime = new Property(1, String.class, "Runtime", false, "RUNTIME");
        public final static Property Year = new Property(2, String.class, "Year", false, "YEAR");
        public final static Property Poster = new Property(3, String.class, "Poster", false, "POSTER");
        public final static Property ImdbId = new Property(4, String.class, "ImdbId", false, "IMDB_ID");
        public final static Property SearchId = new Property(5, long.class, "SearchId", false, "SEARCH_ID");
    };


    public MovieEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MovieEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MovieEntity\" (" + //
                "\"TITLE\" TEXT," + // 0: Title
                "\"RUNTIME\" TEXT," + // 1: Runtime
                "\"YEAR\" TEXT," + // 2: Year
                "\"POSTER\" TEXT," + // 3: Poster
                "\"IMDB_ID\" TEXT," + // 4: ImdbId
                "\"SEARCH_ID\" INTEGER NOT NULL );"); // 5: SearchId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MovieEntity\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MovieEntity entity) {
        stmt.clearBindings();
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(1, Title);
        }
 
        String Runtime = entity.getRuntime();
        if (Runtime != null) {
            stmt.bindString(2, Runtime);
        }
 
        String Year = entity.getYear();
        if (Year != null) {
            stmt.bindString(3, Year);
        }
 
        String Poster = entity.getPoster();
        if (Poster != null) {
            stmt.bindString(4, Poster);
        }
 
        String ImdbId = entity.getImdbId();
        if (ImdbId != null) {
            stmt.bindString(5, ImdbId);
        }
        stmt.bindLong(6, entity.getSearchId());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public MovieEntity readEntity(Cursor cursor, int offset) {
        MovieEntity entity = new MovieEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Title
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Runtime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Year
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Poster
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ImdbId
            cursor.getLong(offset + 5) // SearchId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MovieEntity entity, int offset) {
        entity.setTitle(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRuntime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setYear(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPoster(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImdbId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSearchId(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(MovieEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(MovieEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
